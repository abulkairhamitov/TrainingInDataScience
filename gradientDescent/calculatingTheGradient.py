import matplotlib.pyplot as plt
from functools import partial
# Решая задачи в области науки о данных, мы будем пытаться подобрать наилучшую
# модель, соответствующую конкретной ситуации. При этом обычно под "наилучшей"
# подразумевается модель, которая "минимизирует ошибку модели" либо "максимизиует правдоподобие данных"

# Пусть есть некоторая функция, которая принимает на вход вектор вещественных чисел
# и возвращает единственное вещественное число
def sum_of_squares(v):
    return sum(v_i ** 2 for v_i in v)

# Для таких функций градиент задает для входящего аргумента направление наибыстрейшего возрастания
# И идея состоит в том, чтобы маленькими шагами двигаться в направлении градиента
# Нужно понимать, что если минимумов несколько, то алгоритм найдет один из них и тогда стоит
# запускать алгоритм с нескольких отправных точек
# При отсутствии минимума процедура вполне может войти в бесконечный цикл

# Если f - это функция, то ее производная в точке x измеряет скорость изменения f(x)
# при очень малом изменении в x. Определяется как предел отношения приращений
def difference_quotient(f, x, h): # (1)
    return (f(x + h) - f(x)) / h

# Возьмем функцию x^2
def square(x):
    return x * x

# Для таких функция достаточно просто вычислить производную
def derivative(x): # (2)
    return 2*x

# Посмотрим разницу (1) и (2) вариантов
derivative_estimate = partial(difference_quotient, square, h=0.00001)

xs = range(-10, 10)

plt.plot(xs, [derivative(x) for x in xs], 'rx', label='Факт') # красный х
plt.plot(xs, [derivative_estimate(x) for x in xs], 'b+', label='Оценка') # синий +
plt.legend(loc=9)
plt.show()

# Частное отношение приращений для нескольких переменных будет выглядить так:
def partial_difference_quotient(f, v, i, h):
    """Вычислить i-e частное отношение приращений"""
    w = [v_j + (h if j == i else 0) for j, v_j in enumerate(v)]

    return (f(w) - f(v) / h)

# Сам градиент с помощью частных отношений приращений
def estiamte_gradient(f, v, h=0.00001):
    return [partial_difference_quotient(f, v, i, h) for i, _ in enumerate(v)]
